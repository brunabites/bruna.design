{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { ComputedFields, defineDocumentType, makeSource } from 'contentlayer/source-files';\nimport readingTime from 'reading-time';\n\nimport remarkGfm from 'remark-gfm';\nimport remarkFootnotes from 'remark-footnotes';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\nimport rehypeCodeTitles from 'rehype-code-titles';\nimport rehypePrismPlus from 'rehype-prism-plus';\nimport rehypeSlug from 'rehype-slug';\n\nconst computedFields: ComputedFields = {\n  readingTime: { type: 'json', resolve: (doc) => readingTime(doc.body.raw) },\n  wordCount: {\n    type: 'number',\n    resolve: (doc) => doc.body.raw.split(/\\s+/gu).length,\n  },\n  slug: {\n    type: 'string',\n    resolve: (doc) =>\n      doc._raw.sourceFileName\n        // Replace YYYY-MM-DD dates on slug\n        .replace(/(\\d{4})-(\\d{2})-(\\d{2})-/g, '')\n        .replace(/\\.(mdx|md)|(\\/index\\.(mdx|md))/, ''),\n  },\n};\n\nconst Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: 'posts/**/*.{mdx,md}',\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    summary: { type: 'string', required: true },\n    draft: { type: 'boolean', required: false },\n    last_modified: { type: 'date', required: false },\n    publish_date: { type: 'date', required: true },\n    cover_image: { type: 'string', required: true },\n    tags: {\n      type: 'list',\n      of: { type: 'string' },\n      default: [],\n      required: false,\n    },\n    seo_title: { type: 'string', required: false },\n    seo_description: { type: 'string', required: false },\n  },\n  computedFields,\n}));\n\nconst contentLayerConfig = makeSource({\n  contentDirPath: 'data',\n  documentTypes: [Post],\n  mdx: {\n    remarkPlugins: [remarkGfm, [remarkFootnotes, { inline: true }]],\n    rehypePlugins: [\n      rehypeSlug,\n      rehypeAutolinkHeadings,\n      rehypeCodeTitles,\n      [rehypePrismPlus, { ignoreMissing: true }],\n    ],\n  },\n});\n\nexport default contentLayerConfig;\n"],
  "mappings": ";AAAA,SAAyB,oBAAoB,kBAAkB;AAC/D,OAAO,iBAAiB;AAExB,OAAO,eAAe;AACtB,OAAO,qBAAqB;AAC5B,OAAO,4BAA4B;AACnC,OAAO,sBAAsB;AAC7B,OAAO,qBAAqB;AAC5B,OAAO,gBAAgB;AAEvB,IAAM,iBAAiC;AAAA,EACrC,aAAa,EAAE,MAAM,QAAQ,SAAS,CAAC,QAAQ,YAAY,IAAI,KAAK,GAAG,EAAE;AAAA,EACzE,WAAW;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,IAAI,MAAM,OAAO,EAAE;AAAA,EAChD;AAAA,EACA,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QACR,IAAI,KAAK,eAEN,QAAQ,6BAA6B,EAAE,EACvC,QAAQ,kCAAkC,EAAE;AAAA,EACnD;AACF;AAEA,IAAM,OAAO,mBAAmB,OAAO;AAAA,EACrC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,SAAS,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC1C,OAAO,EAAE,MAAM,WAAW,UAAU,MAAM;AAAA,IAC1C,eAAe,EAAE,MAAM,QAAQ,UAAU,MAAM;AAAA,IAC/C,cAAc,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IAC7C,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA,MACrB,SAAS,CAAC;AAAA,MACV,UAAU;AAAA,IACZ;AAAA,IACA,WAAW,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IAC7C,iBAAiB,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,EACrD;AAAA,EACA;AACF,EAAE;AAEF,IAAM,qBAAqB,WAAW;AAAA,EACpC,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACH,eAAe,CAAC,WAAW,CAAC,iBAAiB,EAAE,QAAQ,KAAK,CAAC,CAAC;AAAA,IAC9D,eAAe;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA,MACA,CAAC,iBAAiB,EAAE,eAAe,KAAK,CAAC;AAAA,IAC3C;AAAA,EACF;AACF,CAAC;AAED,IAAO,8BAAQ;",
  "names": []
}
